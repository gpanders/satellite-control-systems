function [ F ] = phiF( w, dt )
%PHIF Calculate state transition matrix of F
%   PHIF(W,DT) calculates the state transition matrix M of the matrix F used
%   in propagating the covariance matrix in the MEKF in NAV. W is the angular
%   velocity and DT is the propagation interval.
%
%   See also NAV.

% The state transition matrix below was calculated symbolically and copied for
% performance.
alpha = (-w(1)^2 - w(2)^2 - w(3)^2)^(1/2);
beta = alpha^3;
gamma = alpha^5;
delta = norm(w)^2;
c1 = exp(dt*alpha);
c2 = 1/c1;
F = real([ ...
    (w(2)^2*(c1 + c2) + w(3)^2*(c1 + c2) + 2*w(1)^2)/(2*delta), ((w(3)^7*c2)/2 + w(1)*w(2)^3*beta + w(1)^3*w(2)*beta + (w(1)^6*w(3)*c2)/2 + (w(2)^6*w(3)*c2)/2 + (3*w(1)^2*w(3)^5*c2)/2 + (3*w(1)^4*w(3)^3*c2)/2 + (3*w(2)^2*w(3)^5*c2)/2 + (3*w(2)^4*w(3)^3*c2)/2 - (w(3)*c1*delta^3)/2 + (w(1)*w(2)*c1*gamma)/2 + (w(1)*w(2)*c2*gamma)/2 + 3*w(1)^2*w(2)^2*w(3)^3*c2 + w(1)*w(2)*w(3)^2*beta + (3*w(1)^2*w(2)^4*w(3)*c2)/2 + (3*w(1)^4*w(2)^2*w(3)*c2)/2)/(- w(1)^2 - w(2)^2 - w(3)^2)^(7/2), -(c2*(c1 - 1)*(2*w(1)^2*w(2)^3 + 2*w(2)^3*w(3)^2 + w(1)^4*w(2) + w(2)*w(3)^4 + w(2)^5*c1 + w(2)^5 + w(1)^4*w(2)*c1 + w(2)*w(3)^4*c1 + 2*w(1)^2*w(2)*w(3)^2 + 2*w(1)^2*w(2)^3*c1 + 2*w(2)^3*w(3)^2*c1 + w(1)*w(3)*beta - w(1)*w(3)*c1*beta + 2*w(1)^2*w(2)*w(3)^2*c1))/(2*gamma), (c2*(w(1)^2*w(2)^2 + w(1)^2*w(3)^2 + 2*w(2)^2*w(3)^2 - w(2)^4*exp(2*dt*alpha) - w(3)^4*exp(2*dt*alpha) + w(2)^4 + w(3)^4 - w(1)^2*w(2)^2*exp(2*dt*alpha) - w(1)^2*w(3)^2*exp(2*dt*alpha) - 2*w(2)^2*w(3)^2*exp(2*dt*alpha) + 2*dt*w(1)^2*c1*beta))/(2*gamma), -(2*w(3)^3*beta + 2*w(1)^2*w(3)*beta + 2*w(2)^2*w(3)*beta + w(1)*w(2)^5*c1 + w(1)^5*w(2)*c1 - w(1)*w(2)^5*c2 - w(1)^5*w(2)*c2 + 2*w(1)^3*w(2)^3*c1 - 2*w(1)^3*w(2)^3*c2 + w(3)*c1*gamma + w(3)*c2*gamma + 2*dt*w(1)*w(2)^3*beta + 2*dt*w(1)^3*w(2)*beta + w(1)*w(2)*w(3)^4*c1 - w(1)*w(2)*w(3)^4*c2 + 2*w(1)*w(2)^3*w(3)^2*c1 + 2*w(1)^3*w(2)*w(3)^2*c1 - 2*w(1)*w(2)^3*w(3)^2*c2 - 2*w(1)^3*w(2)*w(3)^2*c2 + 2*dt*w(1)*w(2)*w(3)^2*beta)/(2*(- w(1)^2 - w(2)^2 - w(3)^2)^(7/2)), (2*w(2)^3*beta + 2*w(1)^2*w(2)*beta + 2*w(2)*w(3)^2*beta - w(1)*w(3)^5*c1 - w(1)^5*w(3)*c1 + w(1)*w(3)^5*c2 + w(1)^5*w(3)*c2 - 2*w(1)^3*w(3)^3*c1 + 2*w(1)^3*w(3)^3*c2 + w(2)*c1*gamma + w(2)*c2*gamma - 2*dt*w(1)*w(3)^3*beta - 2*dt*w(1)^3*w(3)*beta - w(1)*w(2)^4*w(3)*c1 + w(1)*w(2)^4*w(3)*c2 - 2*w(1)*w(2)^2*w(3)^3*c1 - 2*w(1)^3*w(2)^2*w(3)*c1 + 2*w(1)*w(2)^2*w(3)^3*c2 + 2*w(1)^3*w(2)^2*w(3)*c2 - 2*dt*w(1)*w(2)^2*w(3)*beta)/(2*(- w(1)^2 - w(2)^2 - w(3)^2)^(7/2));
    -(c2*(c1 - 1)*(w(3)*beta - w(1)*w(2)^3 - w(1)^3*w(2) - w(1)*w(2)*w(3)^2 + w(1)*w(2)^3*c1 + w(1)^3*w(2)*c1 + w(3)*c1*beta + w(1)*w(2)*w(3)^2*c1))/(2*delta^2), (w(1)^2*c1 + w(1)^2*c2 + w(3)^2*c1 + w(3)^2*c2 + 2*w(2)^2)/(2*delta), -(c2*(c1 - 1)*(w(1)*w(2)^2 + w(1)*w(3)^2 + w(1)^3*c1 + w(1)^3 + w(1)*w(2)^2*c1 + w(1)*w(3)^2*c1 + w(2)*w(3)*alpha - w(2)*w(3)*c1*alpha))/(2*beta), -(c2*(w(3)^3*beta - 2*w(1)^3*w(2)^3 - w(1)*w(2)^5 - w(1)^5*w(2) + w(1)^2*w(3)*beta + w(2)^2*w(3)*beta + w(3)^3*exp(2*dt*alpha)*beta - w(1)*w(2)*w(3)^4 + w(1)*w(2)^5*exp(2*dt*alpha) + w(1)^5*w(2)*exp(2*dt*alpha) - 2*w(1)*w(2)^3*w(3)^2 - 2*w(1)^3*w(2)*w(3)^2 + 2*w(1)^3*w(2)^3*exp(2*dt*alpha) + 2*w(3)*c1*gamma + w(1)^2*w(3)*exp(2*dt*alpha)*beta + w(2)^2*w(3)*exp(2*dt*alpha)*beta + w(1)*w(2)*w(3)^4*exp(2*dt*alpha) + 2*w(1)*w(2)^3*w(3)^2*exp(2*dt*alpha) + 2*w(1)^3*w(2)*w(3)^2*exp(2*dt*alpha) - 2*dt*w(1)*w(2)*c1*gamma))/(2*(- w(1)^2 - w(2)^2 - w(3)^2)^(7/2)), (c2*(w(1)^2*w(2)^2 + 2*w(1)^2*w(3)^2 + w(2)^2*w(3)^2 - w(1)^4*exp(2*dt*alpha) - w(3)^4*exp(2*dt*alpha) + w(1)^4 + w(3)^4 - w(1)^2*w(2)^2*exp(2*dt*alpha) - 2*w(1)^2*w(3)^2*exp(2*dt*alpha) - w(2)^2*w(3)^2*exp(2*dt*alpha) + 2*dt*w(2)^2*c1*beta))/(2*gamma), (c2*(3*w(2)^3*w(3)^5 + 3*w(2)^5*w(3)^3 + w(2)*w(3)^7 + w(2)^7*w(3) - w(1)*w(2)^2*gamma + w(1)*w(3)^4*beta - w(2)*w(3)^7*exp(2*dt*alpha) - w(2)^7*w(3)*exp(2*dt*alpha) + w(1)^3*w(3)^2*beta + 2*w(1)^2*w(2)*w(3)^5 + 2*w(1)^2*w(2)^5*w(3) + w(1)^4*w(2)*w(3)^3 + w(1)^4*w(2)^3*w(3) - 3*w(2)^3*w(3)^5*exp(2*dt*alpha) - 3*w(2)^5*w(3)^3*exp(2*dt*alpha) + 4*w(1)^2*w(2)^3*w(3)^3 - 4*w(1)^2*w(2)^3*w(3)^3*exp(2*dt*alpha) + 2*w(1)*w(2)^2*c1*gamma + 2*w(1)*w(3)^2*c1*gamma - w(1)*w(2)^2*exp(2*dt*alpha)*gamma + w(1)*w(3)^4*exp(2*dt*alpha)*beta + w(1)*w(2)^2*w(3)^2*beta + w(1)^3*w(3)^2*exp(2*dt*alpha)*beta - 2*w(1)^2*w(2)*w(3)^5*exp(2*dt*alpha) - 2*w(1)^2*w(2)^5*w(3)*exp(2*dt*alpha) - w(1)^4*w(2)*w(3)^3*exp(2*dt*alpha) - w(1)^4*w(2)^3*w(3)*exp(2*dt*alpha) + w(1)*w(2)^2*w(3)^2*exp(2*dt*alpha)*beta + 2*dt*w(2)*w(3)^3*c1*gamma + 2*dt*w(2)^3*w(3)*c1*gamma))/(2*(w(2)^2 + w(3)^2)*(- w(1)^2 - w(2)^2 - w(3)^2)^(7/2));
    (c2*(c1 - 1)*(w(2)*beta + w(1)*w(3)^3 + w(1)^3*w(3) + w(1)*w(2)^2*w(3) - w(1)*w(3)^3*c1 - w(1)^3*w(3)*c1 + w(2)*c1*beta - w(1)*w(2)^2*w(3)*c1))/(2*delta^2), (c2*(c1 - 1)*(w(1)*w(2)^2 + w(1)*w(3)^2 + w(1)^3*c1 + w(1)^3 + w(1)*w(2)^2*c1 + w(1)*w(3)^2*c1 - w(2)*w(3)*alpha + w(2)*w(3)*c1*alpha))/(2*beta), (w(1)^2*c1 + w(1)^2*c2 + w(2)^2*c1 + w(2)^2*c2 + 2*w(3)^2)/(2*delta),  (c2*(2*w(1)^3*w(3)^3 + w(2)^3*beta + w(1)*w(3)^5 + w(1)^5*w(3) + w(1)^2*w(2)*beta + w(2)*w(3)^2*beta + w(2)^3*exp(2*dt*alpha)*beta + w(1)*w(2)^4*w(3) - w(1)*w(3)^5*exp(2*dt*alpha) - w(1)^5*w(3)*exp(2*dt*alpha) + 2*w(1)*w(2)^2*w(3)^3 + 2*w(1)^3*w(2)^2*w(3) - 2*w(1)^3*w(3)^3*exp(2*dt*alpha) + 2*w(2)*c1*gamma + w(1)^2*w(2)*exp(2*dt*alpha)*beta + w(2)*w(3)^2*exp(2*dt*alpha)*beta - w(1)*w(2)^4*w(3)*exp(2*dt*alpha) - 2*w(1)*w(2)^2*w(3)^3*exp(2*dt*alpha) - 2*w(1)^3*w(2)^2*w(3)*exp(2*dt*alpha) + 2*dt*w(1)*w(3)*c1*gamma))/(2*(- w(1)^2 - w(2)^2 - w(3)^2)^(7/2)), -(c2*(w(1)*w(2)^4*beta - 3*w(2)^5*w(3)^3 - w(2)*w(3)^7 - w(2)^7*w(3) - 3*w(2)^3*w(3)^5 - w(1)*w(3)^2*gamma + w(2)*w(3)^7*exp(2*dt*alpha) + w(2)^7*w(3)*exp(2*dt*alpha) + w(1)^3*w(2)^2*beta - 2*w(1)^2*w(2)*w(3)^5 - 2*w(1)^2*w(2)^5*w(3) - w(1)^4*w(2)*w(3)^3 - w(1)^4*w(2)^3*w(3) + 3*w(2)^3*w(3)^5*exp(2*dt*alpha) + 3*w(2)^5*w(3)^3*exp(2*dt*alpha) - 4*w(1)^2*w(2)^3*w(3)^3 + 4*w(1)^2*w(2)^3*w(3)^3*exp(2*dt*alpha) + 2*w(1)*w(2)^2*c1*gamma + 2*w(1)*w(3)^2*c1*gamma + w(1)*w(2)^4*exp(2*dt*alpha)*beta - w(1)*w(3)^2*exp(2*dt*alpha)*gamma + w(1)*w(2)^2*w(3)^2*beta + w(1)^3*w(2)^2*exp(2*dt*alpha)*beta + 2*w(1)^2*w(2)*w(3)^5*exp(2*dt*alpha) + 2*w(1)^2*w(2)^5*w(3)*exp(2*dt*alpha) + w(1)^4*w(2)*w(3)^3*exp(2*dt*alpha) + w(1)^4*w(2)^3*w(3)*exp(2*dt*alpha) + w(1)*w(2)^2*w(3)^2*exp(2*dt*alpha)*beta - 2*dt*w(2)*w(3)^3*c1*gamma - 2*dt*w(2)^3*w(3)*c1*gamma))/(2*(w(2)^2 + w(3)^2)*(- w(1)^2 - w(2)^2 - w(3)^2)^(7/2)), (c2*(2*w(1)^2*w(2)^2 + w(1)^2*w(3)^2 + w(2)^2*w(3)^2 - w(1)^4*exp(2*dt*alpha) - w(2)^4*exp(2*dt*alpha) + w(1)^4 + w(2)^4 - 2*w(1)^2*w(2)^2*exp(2*dt*alpha) - w(1)^2*w(3)^2*exp(2*dt*alpha) - w(2)^2*w(3)^2*exp(2*dt*alpha) + 2*dt*w(3)^2*c1*beta))/(2*gamma);
    0, 0, 0, 1, 0, 0;
    0, 0, 0, 0, 1, 0;
    0, 0, 0, 0, 0, 1;
    ]);

end

